Author: Abrorjon Asralov, Pulat Uralov
Username: asralov, uralovpulya
------------------------------------------------------------
                       THE CLASSES
------------------------------------------------------------
MyLibrary.java -- works as a view program,
user should be mainly running that file, and it works as
a UI. Librarian class is responsible for doing all work.
---
Book.java -- creates an instance of book object. It has got
properties such as author name, title, rating and status 
(read or unread).
---
BooksCollections.java -- works as a "shelfe" for our library
app. It has got a collection of book objects. 
---
Librarian.java -- functions like command processor. Works
with user input, and tries to complete a command that is
given by user. Has methods for completing the user's 
commands.
---
CompareByAuthor.java -- compares books by author names
---
CompareByTitle.java -- compares books by title of the books
------------------------------------------------------------

------------------------------------------------------------
                THE INTERFACE INVOLVED
------------------------------------------------------------

CompareByAuthor implements Comparator<Book> -- uses 
Comparator interface. Takes the first Books object and 
compares its 'author' String instance variable with another 
Book object's 'author' instance variable.
---
CompareByTitle implements Comparator<Book> -- uses 
Comparator interface. Takes the first Books object and 
compares its 'title' String instance variable with another 
Book object's 'title' instance variable.

Both of these classes compare two Book objects using 
String's compareTo method
------------------------------------------------------------

------------------------------------------------------------
                    LIBRARY CLASSES
------------------------------------------------------------
Random -- for getting a radnom index when we suggest a 
random unread book from a book collection
HashMap -- using for two cases, one is handling methods by 
using lambdas to call those methods when they are triggered.
The other case, user interface wise, we have a help command
that is supposed to print command - commandDescription. 
So we have a mapping of string to string. It is for giving
an information to the user on whether what commands do we 
have available in our program
Scanner -- for getting user input, and also, when we have
to read a file, we read that using scanner object
Comparator -- is used to be interface for our two files:
CompareByAuthor.java and CompareByTitle.java those 
implements Comparator. 
File -- is used to create a file object that can be passed
to the scanner, so we can read contents of that file.
FileNotFoundException -- is used to catch an error when
file may not exist (case when user most likely made a 
mistake on inputing a file name)
Collections -- is used for sorting purposes. It gets a 
copy of the array we working, and gets second parameter
to be a file name where user want to get a book sorted 
by author or title. Then it gets sorted by given property.
ArrayList -- is used to store book objects for flexible 
manipulations
------------------------------------------------------------

------------------------------------------------------------
                  DATA STRUCTURES USED 
------------------------------------------------------------
HashMap -- is helpful for storing runnable lambda functions,
so instead of having many nested if else statements in view
model, we carefully take care of it by having our controller
process it with different methods corresponding to the 
command name. And after creating an instance of librarian,
we simply assign strings those are commands to trigger
lambda functions those call librarian's corresponding method
to take care of user's command. To achieve this, we are 
having a hashmap that is -> HashMap<String, Runnable> where
string is a command, and runnable is a lambda function that 
is waiting for being triggered after succesfull user's input
---
ArrayList -- is used for storing book objects. The reason 
for choosing this over primitive arrays in java, it is 
easy to work with array list, they are dynamically changed
and managed. Easy to add, delete, change objects inside.
Instead of having Book[N] where we have to worry to resize
our primitive array, we have ArrayList<Book> that takes 
care of all manipulations.
------------------------------------------------------------

------------------------------------------------------------
                    DESIGN PATTERNS
------------------------------------------------------------
Design Pattern - Strategy. Used Comparator Interface to make
a family of algorithms that compare two Book objects in
different ways. We use these classes interchangeably 
depending on the client's request
---
Design Antipattern avoided - Switch Cases. By using a 
number of different ways to construct the code we avoided
having to use switch cases and repetetive if-else
statements
A. Use of Hashmaps - instead of writing lots of if-else
statements to check for user input, we mapped all commands
into a hashmap that calls differnt methods depending on
the user's input.
B. Use of Interface - by using an interface we don't
need to use a flag to indicate what comparator to use
in what case. 
------------------------------------------------------------